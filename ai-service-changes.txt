// שינויים ל-aiService.ts

// 1. הוספת ייבוא של ספריית OpenAI הרשמית
import OpenAI from 'openai';

// 2. עדכון הקונסטרקטור עם dangerouslyAllowBrowser
constructor() {
  this.apiKey = import.meta.env.VITE_OPENAI_API_KEY || '';
  
  if (this.apiKey) {
    this.openai = new OpenAI({
      apiKey: this.apiKey,
      dangerouslyAllowBrowser: true, // אפשר שימוש בדפדפן למרות הסיכונים
    });
  }
}

// 3. עדכון פונקציית callOpenAI להשתמש בספרייה הרשמית
private async callOpenAI(prompt: string): Promise<string> {
  if (!this.openai) {
    throw new Error('OpenAI API key not configured');
  }

  try {
    const chatResponse = await this.openai.chat.completions.create({
      model: 'gpt-4.1-2025-04-14',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 1000,
      temperature: 0.3,
    });

    return chatResponse.choices[0]?.message?.content || '';
  } catch (error: any) {
    console.error('OpenAI API error:', error);
    throw new Error(`OpenAI API error: ${error?.message || 'Unknown error'}`);
  }
}

// 4. עדכון פונקציית generateEmbedding להשתמש בספרייה הרשמית
async generateEmbedding(text: string): Promise<number[]> {
  try {
    if (!this.openai) {
      // Return a mock embedding vector
      return Array.from({ length: 1536 }, () => Math.random() - 0.5);
    }

    const embeddingResponse = await this.openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input: text,
    });

    return embeddingResponse.data[0]?.embedding || [];
  } catch (error) {
    console.error('Embedding generation failed:', error);
    // Return a mock embedding vector as fallback
    return Array.from({ length: 1536 }, () => Math.random() - 0.5);
  }
}

// 5. הוספה לקובץ package.json
// "dependencies": {
//   "openai": "^4.32.0"
// }

// 6. התקנת החבילה
// npm install openai
